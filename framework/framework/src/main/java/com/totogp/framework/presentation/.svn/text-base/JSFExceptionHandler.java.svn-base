package fr.vdm.soclejee.presentation;

import java.util.Iterator;

import javax.ejb.EJBException;
import javax.el.ELException;
import javax.faces.FacesException;
import javax.faces.context.ExceptionHandler;
import javax.faces.context.ExceptionHandlerWrapper;
import javax.faces.event.ExceptionQueuedEvent;

import fr.vdm.soclejee.exception.BaseException;
import fr.vdm.soclejee.exception.ExceptionManager;

public class JSFExceptionHandler extends ExceptionHandlerWrapper {
	private final javax.faces.context.ExceptionHandler wrapped;
	private final ExceptionManager exceptionManager = new ExceptionManager();

	public JSFExceptionHandler(ExceptionHandler exceptionHandler) {
		wrapped = exceptionHandler;
	}

	@Override
	public ExceptionHandler getWrapped() {
		return wrapped;
	}

	@Override
	public void handle() throws FacesException {
		for (final Iterator<ExceptionQueuedEvent> it = getUnhandledExceptionQueuedEvents().iterator(); it
		    .hasNext();) {
			Throwable t = (Exception) it.next().getContext().getException();

			while ((t instanceof FacesException || t instanceof EJBException || t instanceof ELException)
			    && t.getCause() != null) {
				t = t.getCause();
			}

			BaseException wrappedException = exceptionManager.manageException((Exception) t);

			JsfMessageUtils.addMessageFromException((BaseException) wrappedException,
			    JsfMessageUtils.NO_JSF_DETAILS, JsfMessageUtils.NO_CLIENT_ID);

			it.remove();
		}

		getWrapped().handle();
	}
}
